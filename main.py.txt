import pandas as pd
from sklearn.cluster import KMeans
from sklearn.model_selection import StratifiedKFold
import torch
import torch.nn as nn
from torch.utils.data import DataLoader, TensorDataset
import gradio as gr

# Load extracted features
eeg = pd.read_csv("Extracted_EEG.csv")
ecg = pd.read_csv("ECG.csv")
data = pd.concat([eeg, ecg], axis=1)

# Cluster into 3 emotion labels
kmeans = KMeans(n_clusters=3, random_state=0)
data['label'] = kmeans.fit_predict(data)
data.to_csv("clustered_data_kmeans.csv", index=False)

X = torch.tensor(data.drop('label', axis=1).values, dtype=torch.float32)
y = torch.tensor(data['label'].values, dtype=torch.long)
dataset = TensorDataset(X, y)
dataloader = DataLoader(dataset, batch_size=16, shuffle=True)

class EEGNet(nn.Module):
    def __init__(self, in_features, out_classes):
        super().__init__()
        self.fc = nn.Sequential(
            nn.Linear(in_features, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, out_classes)
        )
    def forward(self, x):
        return self.fc(x)

model = EEGNet(X.shape[1], 3)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Train model
for epoch in range(20):
    for xb, yb in dataloader:
        preds = model(xb)
        loss = criterion(preds, yb)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

torch.save(model.state_dict(), "eegnet_emotion_recognition_kmeans.pth")

# Gradio Interface
def predict(*features):
    model.eval()
    x = torch.tensor([features], dtype=torch.float32)
    with torch.no_grad():
        out = model(x)
    return f"Predicted Emotion Cluster: {torch.argmax(out).item()}"

inputs = [gr.Number(label=f"Feat{i+1}") for i in range(X.shape[1])]
gr.Interface(fn=predict, inputs=inputs, outputs="text").launch()
```